{"id":"../node_modules/@tediousjs/connection-string/lib/parser/connection-string.js","dependencies":[{"name":"C:\\Users\\User\\Desktop\\conect sql\\node_modules\\@tediousjs\\connection-string\\lib\\parser\\connection-string.js.map","includedInParent":true,"mtime":1732457175507},{"name":"C:\\Users\\User\\Desktop\\conect sql\\package.json","includedInParent":true,"mtime":1732457176452},{"name":"C:\\Users\\User\\Desktop\\conect sql\\node_modules\\@tediousjs\\connection-string\\package.json","includedInParent":true,"mtime":1732457175499}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar CollectionMode;\n(function (CollectionMode) {\n    CollectionMode[CollectionMode[\"key\"] = 0] = \"key\";\n    CollectionMode[CollectionMode[\"value\"] = 1] = \"value\";\n})(CollectionMode || (CollectionMode = {}));\nconst CONFIG = Object.freeze({\n    key: {\n        terminator: '=',\n        quotes: {},\n    },\n    value: {\n        terminator: ';',\n        quotes: {\n            '\"': '\"',\n            \"'\": \"'\",\n            '{': '}',\n        },\n    },\n});\nfunction connectionStringParser(connectionString, parserConfig = CONFIG) {\n    const parsed = {};\n    let collectionMode = CollectionMode.key;\n    let started = false;\n    let finished = false;\n    let quoted = false;\n    let quote = '';\n    let buffer = '';\n    let currentKey = '';\n    let pointer = 0;\n    function start() {\n        started = true;\n    }\n    function finish() {\n        finished = true;\n    }\n    function reset() {\n        started = false;\n        finished = false;\n        quoted = false;\n        quote = '';\n        buffer = '';\n    }\n    function config() {\n        return collectionMode === CollectionMode.key ? parserConfig.key : parserConfig.value;\n    }\n    function isTerminator(char) {\n        return config().terminator === char;\n    }\n    function isStartQuote(char) {\n        return Object.keys(config().quotes).some((val) => char === val);\n    }\n    function isEndQuote(char) {\n        return quoted && char === config().quotes[quote];\n    }\n    function push(char) {\n        buffer += char;\n    }\n    function collect() {\n        if (!quoted) {\n            buffer = buffer.trim();\n        }\n        switch (collectionMode) {\n            case CollectionMode.key:\n                currentKey = buffer.toLowerCase();\n                collectionMode = CollectionMode.value;\n                break;\n            case CollectionMode.value:\n                collectionMode = CollectionMode.key;\n                parsed[currentKey] = buffer;\n                currentKey = '';\n                break;\n        }\n        reset();\n    }\n    while (pointer < connectionString.length) {\n        const current = connectionString.charAt(pointer);\n        if (!finished) {\n            if (!started) {\n                if (current.trim()) {\n                    start();\n                    if (isStartQuote(current)) {\n                        quoted = true;\n                        quote = current;\n                    }\n                    else {\n                        push(current);\n                    }\n                }\n            }\n            else {\n                if (quoted && isEndQuote(current)) {\n                    const next = connectionString.charAt(pointer + 1);\n                    if (current === next) {\n                        push(current);\n                        pointer++;\n                    }\n                    else {\n                        finish();\n                    }\n                }\n                else if (!quoted && isTerminator(current)) {\n                    const next = connectionString.charAt(pointer + 1);\n                    if (current === next) {\n                        push(current);\n                        pointer++;\n                    }\n                    else {\n                        collect();\n                    }\n                }\n                else {\n                    push(current);\n                }\n            }\n        }\n        else if (isTerminator(current)) {\n            collect();\n        }\n        else if (current.trim()) {\n            throw new Error('Malformed connection string');\n        }\n        pointer++;\n    }\n    if (quoted && !finished) {\n        throw new Error('Connection string terminated unexpectedly');\n    }\n    else {\n        collect();\n    }\n    return parsed;\n}\nexports.default = connectionStringParser;\n"},"sourceMaps":{"js":{"version":3,"file":"connection-string.js","sourceRoot":"","sources":["../../src/parser/connection-string.ts"],"names":[],"mappings":";;AAUA,IAAK,cAGJ;AAHD,WAAK,cAAc;IACf,iDAAG,CAAA;IACH,qDAAK,CAAA;AACT,CAAC,EAHI,cAAc,KAAd,cAAc,QAGlB;AAED,MAAM,MAAM,GAAiB,MAAM,CAAC,MAAM,CAAC;IACvC,GAAG,EAAE;QACD,UAAU,EAAE,GAAG;QACf,MAAM,EAAE,EAAE;KACb;IACD,KAAK,EAAE;QACH,UAAU,EAAE,GAAG;QACf,MAAM,EAAE;YACJ,GAAG,EAAE,GAAG;YACR,GAAG,EAAE,GAAG;YACR,GAAG,EAAE,GAAG;SACX;KACJ;CACJ,CAAC,CAAC;AAEH,SAAwB,sBAAsB,CAAC,gBAAwB,EAAE,eAA6B,MAAM;IACxG,MAAM,MAAM,GAA2B,EAAE,CAAC;IAC1C,IAAI,cAAc,GAAG,cAAc,CAAC,GAAG,CAAC;IACxC,IAAI,OAAO,GAAG,KAAK,CAAC;IACpB,IAAI,QAAQ,GAAG,KAAK,CAAC;IACrB,IAAI,MAAM,GAAG,KAAK,CAAC;IACnB,IAAI,KAAK,GAAG,EAAE,CAAC;IACf,IAAI,MAAM,GAAG,EAAE,CAAC;IAChB,IAAI,UAAU,GAAG,EAAE,CAAC;IACpB,IAAI,OAAO,GAAG,CAAC,CAAC;IAEhB,SAAS,KAAK;QACV,OAAO,GAAG,IAAI,CAAC;IACnB,CAAC;IAED,SAAS,MAAM;QACX,QAAQ,GAAG,IAAI,CAAC;IACpB,CAAC;IAED,SAAS,KAAK;QACV,OAAO,GAAG,KAAK,CAAC;QAChB,QAAQ,GAAG,KAAK,CAAC;QACjB,MAAM,GAAG,KAAK,CAAC;QACf,KAAK,GAAG,EAAE,CAAC;QACX,MAAM,GAAG,EAAE,CAAC;IAChB,CAAC;IAED,SAAS,MAAM;QACX,OAAO,cAAc,KAAK,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC,YAAY,CAAC,KAAK,CAAA;IACxF,CAAC;IAED,SAAS,YAAY,CAAC,IAAY;QAC9B,OAAO,MAAM,EAAE,CAAC,UAAU,KAAK,IAAI,CAAC;IACxC,CAAC;IAED,SAAS,YAAY,CAAC,IAAY;QAC9B,OAAO,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,GAAW,EAAE,EAAE,CAAC,IAAI,KAAK,GAAG,CAAC,CAAC;IAC5E,CAAC;IAED,SAAS,UAAU,CAAC,IAAY;QAC5B,OAAO,MAAM,IAAI,IAAI,KAAK,MAAM,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IACrD,CAAC;IAED,SAAS,IAAI,CAAC,IAAY;QACtB,MAAM,IAAI,IAAI,CAAC;IACnB,CAAC;IAED,SAAS,OAAO;QACZ,IAAI,CAAC,MAAM,EAAE;YACT,MAAM,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC;SAC1B;QACD,QAAQ,cAAc,EAAE;YACpB,KAAK,cAAc,CAAC,GAAG;gBACnB,UAAU,GAAG,MAAM,CAAC,WAAW,EAAE,CAAC;gBAClC,cAAc,GAAG,cAAc,CAAC,KAAK,CAAC;gBACtC,MAAM;YACV,KAAK,cAAc,CAAC,KAAK;gBACrB,cAAc,GAAG,cAAc,CAAC,GAAG,CAAC;gBACpC,MAAM,CAAC,UAAU,CAAC,GAAG,MAAM,CAAC;gBAC5B,UAAU,GAAG,EAAE,CAAC;gBAChB,MAAM;SACb;QACD,KAAK,EAAE,CAAC;IACZ,CAAC;IAED,OAAO,OAAO,GAAG,gBAAgB,CAAC,MAAM,EAAE;QACtC,MAAM,OAAO,GAAG,gBAAgB,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;QACjD,IAAI,CAAC,QAAQ,EAAE;YACX,IAAI,CAAC,OAAO,EAAE;gBACV,IAAI,OAAO,CAAC,IAAI,EAAE,EAAE;oBAChB,KAAK,EAAE,CAAC;oBACR,IAAI,YAAY,CAAC,OAAO,CAAC,EAAE;wBACvB,MAAM,GAAG,IAAI,CAAC;wBACd,KAAK,GAAG,OAAO,CAAC;qBACnB;yBAAM;wBACH,IAAI,CAAC,OAAO,CAAC,CAAC;qBACjB;iBACJ;aACJ;iBAAM;gBACH,IAAI,MAAM,IAAI,UAAU,CAAC,OAAO,CAAC,EAAE;oBAC/B,MAAM,IAAI,GAAG,gBAAgB,CAAC,MAAM,CAAC,OAAO,GAAG,CAAC,CAAC,CAAC;oBAClD,IAAI,OAAO,KAAK,IAAI,EAAE;wBAClB,IAAI,CAAC,OAAO,CAAC,CAAC;wBACd,OAAO,EAAE,CAAC;qBACb;yBAAM;wBACH,MAAM,EAAE,CAAC;qBACZ;iBACJ;qBAAM,IAAI,CAAC,MAAM,IAAI,YAAY,CAAC,OAAO,CAAC,EAAE;oBACzC,MAAM,IAAI,GAAG,gBAAgB,CAAC,MAAM,CAAC,OAAO,GAAG,CAAC,CAAC,CAAC;oBAClD,IAAI,OAAO,KAAK,IAAI,EAAE;wBAClB,IAAI,CAAC,OAAO,CAAC,CAAC;wBACd,OAAO,EAAE,CAAC;qBACb;yBAAM;wBACH,OAAO,EAAE,CAAC;qBACb;iBACJ;qBAAM;oBACH,IAAI,CAAC,OAAO,CAAC,CAAC;iBACjB;aACJ;SACJ;aAAM,IAAI,YAAY,CAAC,OAAO,CAAC,EAAE;YAC9B,OAAO,EAAE,CAAC;SACb;aAAM,IAAI,OAAO,CAAC,IAAI,EAAE,EAAE;YACvB,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAC;SAClD;QACD,OAAO,EAAE,CAAC;KACb;IACD,IAAI,MAAM,IAAI,CAAC,QAAQ,EAAE;QACrB,MAAM,IAAI,KAAK,CAAC,2CAA2C,CAAC,CAAC;KAChE;SAAM;QACH,OAAO,EAAE,CAAC;KACb;IAED,OAAO,MAAM,CAAC;AAClB,CAAC;AAjHD,yCAiHC","sourcesContent":[null]}},"error":null,"hash":"50058e5ab939276d5025c8a28fd20b66","cacheData":{"env":{}}}